import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import aiosqlite
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '–í–ê–®_API_–¢–û–ö–ï–ù'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
builder = ReplyKeyboardBuilder()
builder.add(KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"))
builder.add(KeyboardButton(text="üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"))
builder.add(KeyboardButton(text="‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"))
keyboard = builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
async def get_db():
    async with aiosqlite.connect('anon_chat.db') as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS sessions (
                user1_id INTEGER,
                user2_id INTEGER,
                active INTEGER DEFAULT 1
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS queue (
                user_id INTEGER PRIMARY KEY
            )
        ''')
        await db.commit()
        return db

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç.\n"
        "–ù–∞–∂–º–∏ '–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞' –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.",
        reply_markup=keyboard
    )

# –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
@dp.message(F.text == "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def find_companion(message: Message):
    user_id = message.from_user.id
    
    async with aiosqlite.connect('anon_chat.db') as db:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        existing = await db.execute_fetchall(
            'SELECT * FROM sessions WHERE user1_id = ? OR user2_id = ? AND active = 1',
            (user_id, user_id)
        )
        if existing:
            return await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏
        queue = await db.execute_fetchall('SELECT * FROM queue')
        queue_users = [q[0] for q in queue]
        
        if user_id in queue_users:
            return await message.answer("–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏!")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
        await db.execute('INSERT INTO queue (user_id) VALUES (?)', (user_id,))
        await db.commit()
        
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å. –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")

        # –ü–æ–∏—Å–∫ –ø–∞—Ä—ã
        if len(queue) >= 2:
            users = queue_users[:2]
            await db.execute('DELETE FROM queue WHERE user_id IN (?, ?)', users)
            await db.execute('INSERT INTO sessions (user1_id, user2_id) VALUES (?, ?)', users)
            await db.commit()
            
            for uid in users:
                await bot.send_message(uid, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ü–∏—à–∏—Ç–µ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
async def handle_text(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect('anon_chat.db') as db:
        # –ü–æ–∏—Å–∫ —Å–µ—Å—Å–∏–∏
        session = await db.execute_fetchone(
            'SELECT user1_id, user2_id FROM sessions WHERE (user1_id = ? OR user2_id = ?) AND active = 1',
            (user_id, user_id)
        )
        if not session:
            return
        
        companion_id = session[1] if session[0] == user_id else session[0]
        await message.copy_to(companion_id, caption="–ê–Ω–æ–Ω–∏–º: ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
@dp.message(F.photo | F.video | F.document)
async def handle_media(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect('anon_chat.db') as db:
        session = await db.execute_fetchone(
            'SELECT user1_id, user2_id FROM sessions WHERE (user1_id = ? OR user2_id = ?) AND active = 1',
            (user_id, user_id)
        )
        if not session:
            return
        
        companion_id = session[1] if session[0] == user_id else session[0]
        await message.copy_to(companion_id)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
@dp.message(F.text == "üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def stop_dialog(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect('anon_chat.db') as db:
        await db.execute(
            'UPDATE sessions SET active = 0 WHERE user1_id = ? OR user2_id = ?',
            (user_id, user_id)
        )
        await db.commit()
        await message.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ '–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞' —Å–Ω–æ–≤–∞", reply_markup=keyboard)

# –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è
@dp.message(F.text == "‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è")
async def report_user(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect('anon_chat.db') as db:
        session = await db.execute_fetchone(
            'SELECT user1_id, user2_id FROM sessions WHERE (user1_id = ? OR user2_id = ?) AND active = 1',
            (user_id, user_id)
        )
        if not session:
            return await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∂–∞–ª–æ–±—ã")
        
        companion_id = session[1] if session[0] == user_id else session[0]
        await bot.ban_chat_member(chat_id=companion_id, user_id=companion_id)
        await message.answer("–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())